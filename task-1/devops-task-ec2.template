{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Template for DevOps Task.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "VPC"
                    },
                    "Parameters": [
                        "Name",
                        "VpcCidr",
                        "Environment"
                    ]
                },
                {
                    "Label": {
                        "default": "Public Subnets"
                    },
                    "Parameters": [
                        "PublicSubnet1Cidr",
                        "PublicSubnet2Cidr"
                    ]
                },
                {
                    "Label": {
                        "default": "Private Subnets"
                    },
                    "Parameters": [
                        "PrivateSubnet1Cidr",
                        "PrivateSubnet2Cidr"
                    ]
                },
                {
                    "Label": {
                        "default": "Docker Image Info"
                    },
                    "Parameters": [
                        "DockerImage"
                    ]
                },
                {
                    "Label": {
                        "default": "Ec2 Info"
                    },
                    "Parameters": [
                        "InstanceType",
                        "KeyName",
                        "DesiredCapacity",
                        "MaxSize"
                    ]
                }
            ]
        }
    },
    "Parameters": {
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the ECS instances."
        },
        "DesiredCapacity": {
            "Type": "Number",
            "Default": "1",
            "Description": "Number of instances to launch in your ECS cluster."
        },
        "MaxSize": {
            "Type": "Number",
            "Default": "1",
            "Description": "Maximum number of instances that can be launched in your ECS cluster."
        },
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge"
            ],
            "ConstraintDescription": "Please choose a valid instance type."
        },
        "Name": {
            "Description": "Name of Vpc",
            "Type": "String",
            "Default": "devops"
        },
        "DockerImage": {
            "Description": "Docker Image",
            "Type": "String",
            "Default": "229349022034.dkr.ecr.us-east-1.amazonaws.com/helloapp:ecr-helloapp"
        },
        "VpcCidr": {
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Description": "The CIDR range for your VPC in form x.x.x.x/x",
            "Type": "String",
            "Default": "10.0.0.0/16"
        },
        "PublicSubnet1Cidr": {
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Description": "The CIDR range for your Public 1 Subnet in form x.x.x.x/x",
            "Type": "String",
            "Default": "10.0.0.0/20"
        },
        "PrivateSubnet1Cidr": {
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Description": "The CIDR range for your Private 1 Subnet in form x.x.x.x/x",
            "Type": "String",
            "Default": "10.0.32.0/20"
        },
        "PublicSubnet2Cidr": {
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Description": "The CIDR range for your Public 2 Subnet in form x.x.x.x/x",
            "Type": "String",
            "Default": "10.0.16.0/20"
        },
        "PrivateSubnet2Cidr": {
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Description": "The CIDR range for your Private 2 Subnet in form x.x.x.x/x",
            "Type": "String",
            "Default": "10.0.48.0/20"
        },
        "Environment": {
            "Description": "Specify the Environment where lambda function is deploying.",
            "Type": "String",
            "Default": "devops",
            "AllowedValues": [
                "devops"
            ],
            "ConstraintDescription": "Must specify devops."
        }
    },
    "Mappings": {
        "AWSRegionToAMI": {
            "us-east-1": {
                "AMIID": "ami-eca289fb"
            }
        },
        "RegionMap": {
            "us-east-1": {
                "region": "ue1"
            }
        }
    },
    "Resources": {
        "Vpc": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "VpcCidr"
                },
                "EnableDnsHostnames": "true",
                "EnableDnsSupport": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "Name"
                                    },
                                    {
                                        "Ref": "Environment"
                                    },
                                    {
                                        "Fn::FindInMap": [
                                            "RegionMap",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "region"
                                        ]
                                    },
                                    "vpc"
                                ]
                            ]
                        }
                    }
                ]
            },
            "Type": "AWS::EC2::VPC"
        },
        "InternetGateway": {
            "DependsOn": "Vpc",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "Name"
                                    },
                                    {
                                        "Ref": "Environment"
                                    },
                                    {
                                        "Fn::FindInMap": [
                                            "RegionMap",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "region"
                                        ]
                                    },
                                    "vpc-igw"
                                ]
                            ]
                        }
                    }
                ]
            },
            "Type": "AWS::EC2::InternetGateway"
        },
        "AttachGateway": {
            "DependsOn": [
                "Vpc",
                "InternetGateway"
            ],
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        },
        "RouteViaIgw": {
            "DependsOn": "Vpc",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "Name"
                                    },
                                    {
                                        "Ref": "Environment"
                                    },
                                    {
                                        "Fn::FindInMap": [
                                            "RegionMap",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "region"
                                        ]
                                    },
                                    "vpc-public-rt-1"
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PublicRouteViaIgw": {
            "DependsOn": [
                "AttachGateway",
                "RouteViaIgw"
            ],
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "RouteViaIgw"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "PublicSubnet1": {
            "DependsOn": "Vpc",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "MapPublicIpOnLaunch": "true",
                "CidrBlock": {
                    "Ref": "PublicSubnet1Cidr"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "Name"
                                    },
                                    {
                                        "Ref": "Environment"
                                    },
                                    {
                                        "Fn::FindInMap": [
                                            "RegionMap",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "region"
                                        ]
                                    },
                                    "vpc-publicsubnet-1"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Tier",
                        "Value": "Public"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PrivateSubnet1": {
            "DependsOn": "Vpc",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Ref": "PrivateSubnet1Cidr"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "Name"
                                    },
                                    {
                                        "Ref": "Environment"
                                    },
                                    {
                                        "Fn::FindInMap": [
                                            "RegionMap",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "region"
                                        ]
                                    },
                                    "vpc-privatesubnet-1"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Tier",
                        "Value": "Private"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PublicSubnet2": {
            "DependsOn": "Vpc",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "MapPublicIpOnLaunch": "true",
                "CidrBlock": {
                    "Ref": "PublicSubnet2Cidr"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "Name"
                                    },
                                    {
                                        "Ref": "Environment"
                                    },
                                    {
                                        "Fn::FindInMap": [
                                            "RegionMap",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "region"
                                        ]
                                    },
                                    "vpc-publicsubnet-2"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Tier",
                        "Value": "Public"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PrivateSubnet2": {
            "DependsOn": "Vpc",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Ref": "PrivateSubnet2Cidr"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "Name"
                                    },
                                    {
                                        "Ref": "Environment"
                                    },
                                    {
                                        "Fn::FindInMap": [
                                            "RegionMap",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "region"
                                        ]
                                    },
                                    "vpc-privatesubnet-2"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Tier",
                        "Value": "Private"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PublicSubnet1RouteTableAssociation": {
            "DependsOn": [
                "PublicSubnet1",
                "RouteViaIgw"
            ],
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteViaIgw"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "PublicSubnet2RouteTableAssociation": {
            "DependsOn": [
                "PublicSubnet2",
                "RouteViaIgw"
            ],
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteViaIgw"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "NatGateway1": {
            "DependsOn": [
                "AttachGateway",
                "NatGateway1EIP"
            ],
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NatGateway1EIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "Name"
                                    },
                                    {
                                        "Ref": "Environment"
                                    },
                                    {
                                        "Fn::FindInMap": [
                                            "RegionMap",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "region"
                                        ]
                                    },
                                    "vpc-natgateway-1"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "NatGateway1EIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NatGateway2": {
            "DependsOn": [
                "AttachGateway",
                "NatGateway2EIP"
            ],
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NatGateway2EIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "Name"
                                    },
                                    {
                                        "Ref": "Environment"
                                    },
                                    {
                                        "Fn::FindInMap": [
                                            "RegionMap",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "region"
                                        ]
                                    },
                                    "vpc-natgateway-2"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "NatGateway2EIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "RouteViaNAT1": {
            "DependsOn": "Vpc",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "Name"
                                    },
                                    {
                                        "Ref": "Environment"
                                    },
                                    {
                                        "Fn::FindInMap": [
                                            "RegionMap",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "region"
                                        ]
                                    },
                                    "vpc-private-rt-1"
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PrivateSubnet1RouteViaNAT": {
            "DependsOn": [
                "RouteViaNAT1",
                "NatGateway1"
            ],
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteViaNAT1"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NatGateway1"
                }
            }
        },
        "PrivateSubnet1RouteTableAssociation": {
            "DependsOn": [
                "PrivateSubnet1",
                "PrivateSubnet1RouteViaNAT"
            ],
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteViaNAT1"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "RouteViaNAT2": {
            "DependsOn": "Vpc",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "Name"
                                    },
                                    {
                                        "Ref": "Environment"
                                    },
                                    {
                                        "Fn::FindInMap": [
                                            "RegionMap",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "region"
                                        ]
                                    },
                                    "vpc-private-rt-2"
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PrivateSubnet2RouteViaNAT": {
            "DependsOn": [
                "RouteViaNAT2",
                "NatGateway2"
            ],
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteViaNAT2"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NatGateway2"
                }
            }
        },
        "PrivateSubnet2RouteTableAssociation": {
            "DependsOn": [
                "PrivateSubnet2",
                "PrivateSubnet2RouteViaNAT"
            ],
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteViaNAT2"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet2"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "ECSCluster": {
            "Type": "AWS::ECS::Cluster"
        },
        "EcsSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "ECS Security Group",
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "EcsSecurityGroupHTTPinbound": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EcsSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "EcsSecurityGroupSSHinbound": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EcsSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "EcsSecurityGroupALBports": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EcsSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "31000",
                "ToPort": "61000",
                "SourceSecurityGroupId": {
                    "Ref": "EcsSecurityGroup"
                }
            }
        },
        "CloudwatchLogsGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Fn::Join": [
                        "-",
                        [
                            "ECSLogGroup",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "RetentionInDays": 7
            }
        },
        "taskdefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-ecs-app"
                        ]
                    ]
                },
                "ContainerDefinitions": [
                    {
                        "Name": "simple-app",
                        "Cpu": "10",
                        "Essential": "true",
                        "Image": "httpd:2.4",
                        "Memory": "300",
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": "ecs-app"
                            }
                        },
                        "MountPoints": [
                            {
                                "ContainerPath": "/usr/local/apache2/htdocs",
                                "SourceVolume": "my-vol"
                            }
                        ],
                        "PortMappings": [
                            {
                                "ContainerPort": 80
                            }
                        ]
                    },
                    {
                        "Name": "busybox",
                        "Cpu": 10,
                        "Command": [
                            "/bin/sh -c \"while true; do echo '<html> <head> <title>Hello World</title> <style>body {margin-top: 40px; background-color: #333;} </style> </head><body> <div style=color:white;text-align:center> <h1>Hello World!</h1>' > top; echo '</div></body></html>' > bottom; > /usr/local/apache2/htdocs/index.html ; sleep 1; done\""
                        ],
                        "EntryPoint": [
                            "sh",
                            "-c"
                        ],
                        "Essential": false,
                        "Image": "busybox",
                        "Memory": 200,
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": "ecs-app"
                            }
                        },
                        "VolumesFrom": [
                            {
                                "SourceContainer": "simple-app"
                            }
                        ]
                    }
                ],
                "Volumes": [
                    {
                        "Name": "my-vol"
                    }
                ]
            }
        },
        "ECSALB": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Name": "ECSALB",
                "Scheme": "internet-facing",
                "LoadBalancerAttributes": [
                    {
                        "Key": "idle_timeout.timeout_seconds",
                        "Value": "30"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "PrivateSubnet1"
                    },
                    {
                        "Ref": "PrivateSubnet2"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "EcsSecurityGroup"
                    }
                ]
            }
        },
        "ALBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "DependsOn": "ECSServiceRole",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ECSTG"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ECSALB"
                },
                "Port": "80",
                "Protocol": "HTTP"
            }
        },
        "ECSALBListenerRule": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "DependsOn": "ALBListener",
            "Properties": {
                "Actions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ECSTG"
                        }
                    }
                ],
                "Conditions": [
                    {
                        "Field": "path-pattern",
                        "Values": [
                            "/"
                        ]
                    }
                ],
                "ListenerArn": {
                    "Ref": "ALBListener"
                },
                "Priority": 1
            }
        },
        "ECSTG": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "DependsOn": "ECSALB",
            "Properties": {
                "HealthCheckIntervalSeconds": 10,
                "HealthCheckPath": "/",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "Name": "ECSTG",
                "Port": 80,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 2,
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "ECSAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PublicSubnet1"
                    },
                    {
                        "Ref": "PublicSubnet2"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "ContainerInstances"
                },
                "MinSize": "1",
                "MaxSize": {
                    "Ref": "MaxSize"
                },
                "DesiredCapacity": {
                    "Ref": "DesiredCapacity"
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingReplacingUpdate": {
                    "WillReplace": "true"
                }
            }
        },
        "ContainerInstances": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionToAMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMIID"
                    ]
                },
                "SecurityGroups": [
                    {
                        "Ref": "EcsSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "IamInstanceProfile": {
                    "Ref": "EC2InstanceProfile"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "mv /etc/localtime /etc/localtime.bak\n",
                                "ln -s /usr/share/zoneinfo/US/Eastern /etc/localtime\n",
                                "date\n",
                                "echo ECS_CLUSTER=",
                                {
                                    "Ref": "ECSCluster"
                                },
                                " >> /etc/ecs/ecs.config\n",
                                "yum install -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource ECSAutoScalingGroup ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "service": {
            "Type": "AWS::ECS::Service",
            "DependsOn": "ALBListener",
            "Properties": {
                "Cluster": {
                    "Ref": "ECSCluster"
                },
                "DesiredCount": "1",
                "LoadBalancers": [
                    {
                        "ContainerName": "simple-app",
                        "ContainerPort": "80",
                        "TargetGroupArn": {
                            "Ref": "ECSTG"
                        }
                    }
                ],
                "Role": {
                    "Ref": "ECSServiceRole"
                },
                "TaskDefinition": {
                    "Ref": "taskdefinition"
                }
            }
        },
        "ECSServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ecs.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "ecs-service",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                        "elasticloadbalancing:DeregisterTargets",
                                        "elasticloadbalancing:Describe*",
                                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                        "elasticloadbalancing:RegisterTargets",
                                        "ec2:Describe*",
                                        "ec2:AuthorizeSecurityGroupIngress"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ServiceScalingTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "DependsOn": "service",
            "Properties": {
                "MaxCapacity": 2,
                "MinCapacity": 1,
                "ResourceId": {
                    "Fn::Join": [
                        "",
                        [
                            "service/",
                            {
                                "Ref": "ECSCluster"
                            },
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "service",
                                    "Name"
                                ]
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::GetAtt": [
                        "AutoscalingRole",
                        "Arn"
                    ]
                },
                "ScalableDimension": "ecs:service:DesiredCount",
                "ServiceNamespace": "ecs"
            }
        },
        "ServiceScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": {
                    "Fn::Sub": "${AWS::StackName}-cpu20"
                },
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "ServiceScalingTarget"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "TargetValue": 20.0,
                    "ScaleInCooldown": 180,
                    "ScaleOutCooldown": 60,
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
                    }
                }
            }
        },
        "EC2Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "ecs-service",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ecs:CreateCluster",
                                        "ecs:DeregisterContainerInstance",
                                        "ecs:DiscoverPollEndpoint",
                                        "ecs:Poll",
                                        "ecs:RegisterContainerInstance",
                                        "ecs:StartTelemetrySession",
                                        "ecs:Submit*",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "AutoscalingRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "application-autoscaling.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "service-autoscaling",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "application-autoscaling:*",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:PutMetricAlarm",
                                        "ecs:DescribeServices",
                                        "ecs:UpdateService"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "EC2InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "EC2Role"
                    }
                ]
            }
        }
    },
    "Outputs": {
        "ecsservice": {
            "Value": {
                "Ref": "service"
            }
        },
        "ecscluster": {
            "Value": {
                "Ref": "ECSCluster"
            }
        },
        "ECSALB": {
            "Description": "Your ALB DNS URL",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Fn::GetAtt": [
                                "ECSALB",
                                "DNSName"
                            ]
                        }
                    ]
                ]
            }
        },
        "taskdef": {
            "Value": {
                "Ref": "taskdefinition"
            }
        }
    }
}